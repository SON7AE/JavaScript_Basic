// 3.3 텍스트
// 자바스크립트에서 텍스트를 표현하는 타입은 문자열이다.
// 문자열은 16비트 값이 순서에 따라 이어진 형태이며, 기본 값이므로 불변이다.
// 각 값은 일반적으로 유니코드 문자이다.

// 3.3.1 문자열 리터럴
// 자바스크립트 프로그램에 문자열을 사용할 때는 그 문자열을 앞뒤가 맞는 작은따옴표(''), 큰따옴표(""), 백틱(``) 쌍으로 묶으면 된다.

// 3.3.2 문자열 리터럴 안의 이스케이프 시퀀스
// 자바스크립트 문자열에서 역슬래시(\)는 특별한 의미를 갖는다.
// 역슬래시는 그 다음 문자와 조합해서 일반적인 방법으로는 문자열에 표시할 수 없는 문자를 표현한다.

// 3.3.3 문자열 다루기
// 자바스크립트에는 문자열을 '병합(연결)'하는 기능이 내장되어 있다.
// + 연산자를 숫자와 함께 쓰면 이 연산자는 숫자를 더한다.
// + 연산자를 문자열에 쓰면 두 번째 문자열을 첫 번째 문자열 뒤에 이어 붙인다.

let msg = "Hello" + "world";
let greeting = "Welcome to my blog," + "" + name;

// 자바스크립트에서 문자열의 길이를 구할 때, 문자열의 길이, 즉 그 안에 포함된 16비트 값의 개수는 legnth 프로퍼티로 알 수 있다.
msg.length; // 이와 같이 말이다.

// 문자열의 일부를 가져온다.
msg.substring(1, 4); // => "ell" : 두 번째, 세 번째, 네 번째 문자
msg.slice(1, 4); // => 'ell' : 같은 결과
msg.slice(-3); // 'rld' : 마지막 세문자
msg.split(","); // ["hello", "world"]

// 문자열을 변경한다.
msg.replace(a, b); // a를 b로 바꿔 출력
msg.toLowerCase(); // 소문자로 변경
msg.toUpperCase(); // 대문자로 변경

// 공백제거
" test ".trim(); // 앞뒤 공백을 제거
" test ".trimStart(); // 왼쪽 공백을 제거
" test ".trimEnd(); // 오른쪽 공백을 제거

// 자바스크립트의 문자열은 불변이라는 사실을 꼭 기억하도록 하자.
// replace()나 toUpperCase() 같은 메서드는 기존 문자열을 수정하는 것이 아니라 새 문자열을 반환하는 것이다.

// 3.3.4 템플릿 리터럴
// 백틱으로 감싼 문자열 리터럴
