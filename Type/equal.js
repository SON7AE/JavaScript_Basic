// 3.9 변환과 일치
// 자바스크립트에는 두 값이 같은지 테스트하는 연산자가 두 개 있다.
// 일치연산자 ===는 두 피연산자가 다른 타입이면 같지 않다고 판단하며,
// 동등연산자 ==를 선택하는 것보다 거의 항상 더 좋다.
// 하지만 자바스크립트는 타입 변환이 엄격하지 않으므로 좀 더 관대한 기준을 가진 동등연산자를 정의했다.

null == undefined; // true : 두 값을 같은 것으로 취급한다.
"0" == 0; // true : 비교하기 전에 문자열을 숫자로 변환한다.
0 == false; // true : 비교하기 전에 불 값을 숫자로 변환한다.
"0" == false; // true : 비교하기 전에 두 피연산자를 모두 0으로 변환한다.

// 3.9.2 명시적 변환
// 자바스크립트는 자동으로 타입을 변환하기는 하지만 때때로 직접 변환해야 할 때도 있다.
// 값을 명시적으로 변환해야 코드가 읽기 쉬워진다고 생각하는 사람도 있다.
// 명시적으로 타입을 변환하는 가장 단순한 방법은 Boolean(), Number(), String() 함수이다.

Number("3"); // => 3 : 문자열 3을 숫자 3으로 변환
String(false); // => "false" : false.toString()과 같다.
Boolean([]); // => true

// null과 undefined를 제외한 모든 값에 toString() 메서드가 있으며, 이 메서드의 결과는 보통 String() 함수가 반환하는 값과 같다.
// 참고로 Boolean(), Number(), String() 함수는 모두 new와 함께 호출해서 생성자로 사용할 수 있다.
// 이런 식으로 사용하면 기본 불, 숫자, 문자열 값과 똑같이 동작하는 '래퍼' 객체를 얻는다.

// toString()과 valueOf() 메서드
// 모든 객체는 기본 값으로 변환할 때 사용하는 두 가지 변환 메서드를 상속한다.
// 문자열 선호, 숫자 선호, 선호 없음 알고리즘을 설명하기 전에 먼저 이 메서드를 설명해야 한다.
// 첫 번째 메서드인 toString()은 객체의 문자열 표현을 반환한다.
// toString() 메서드는 각 요소를 문자열로 변환하고 이들을 콤마로 연결해 반환한다.
// 함수의 toString() 메서드는 사용자 정의 함수에 따라 자바스크립트 소스 코드를 문자열로 변환해서 반환한다.

// valueOf()는 객체를 표현하는 기본 값이 존재한다면, 그 값으로 객체를 변환한다.
// 하지만 객체는 복합된 형태이며 대부분의 객체는 단일한 기본 값으로 표현하는 것이 불가능하다.
// 따라서 기본 valueOf() 메서드는 기본 값이 아니라 객체 자체를 반환한다.
